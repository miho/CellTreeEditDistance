package edu.gcsc.celltreeedit.CodeEridTest;

import com.apporiented.algorithm.clustering.Cluster;
import edu.gcsc.celltreeedit.Clustering.Clustering;
import org.junit.Test;

import java.util.Set;

import static junit.framework.TestCase.assertTrue;
import static org.junit.Assert.assertEquals;

public class ClusteringTest {

    //TODO: complete test
    @Test
    public void clusteringWardTest() {
        double[][] distanceMatrix = new double[][]{
                {0.0000000,0.8333607,0.8471952,0.4335730,0.6040070,0.6457721,0.8158463,0.9324100,0.7002394,0.7697922,0.3832023,0.7385950,0.9104691,0.6806722,0.5530230,0.7060232,0.7806748,0.4811467,1.0543074,1.0312414},
                {0.8333607,0.0000000,0.9349784,0.5617406,0.7251291,0.6669092,0.7150473,1.1283738,0.5796361,0.2664122,1.1842056,1.0238666,0.8596584,0.9697268,0.5426308,0.8283289,0.6035924,0.4251583,0.6910158,0.5428669},
                {0.8471952,0.9349784,0.0000000,0.8298117,0.3589344,0.7280070,0.3089397,0.6247395,0.9884054,1.0508882,1.0733952,0.5339310,0.4706486,1.0041705,0.9041373,0.7529083,0.3833401,0.7093129,0.6287134,0.8928541},
                {0.4335730,0.5617406,0.8298117,0.0000000,0.5347728,0.5416865,0.6695029,1.0815867,0.6040087,0.6157560,0.8076615,0.9303136,0.8641996,0.9566362,0.3426582,0.7662734,0.6458395,0.3030634,0.9552274,0.6369529},
                {0.6040070,0.7251291,0.3589344,0.5347728,0.0000000,0.3941484,0.3785290,0.6371315,0.8676809,0.8290206,0.9067956,0.5363400,0.6499376,0.8811544,0.7146311,0.5081763,0.4034689,0.4009520,0.6224170,0.7427165},
                {0.6457721,0.6669092,0.7280070,0.5416865,0.3941484,0.0000000,0.7143346,0.7237315,0.9807866,0.7302145,0.9680031,0.6882020,0.9850156,0.8625799,0.8123592,0.3083869,0.6877911,0.3376008,0.6867560,0.8155691},
                {0.8158463,0.7150473,0.3089397,0.6695029,0.3785290,0.7143346,0.0000000,0.8494834,0.7736701,0.8721382,1.1088296,0.7318844,0.3508891,1.0521348,0.6857653,0.8308755,0.1573864,0.5888679,0.6103338,0.6175606},
                {0.9324100,1.1283738,0.6247395,1.0815867,0.6371315,0.7237315,0.8494834,0.0000000,1.2709967,1.1385104,1.0541236,0.2422061,0.9533462,0.7433551,1.2210426,0.4927307,0.8237029,0.8516698,0.6766628,1.3124129},
                {0.7002394,0.5796361,0.9884054,0.6040087,0.8676809,0.9807866,0.7736701,1.2709967,0.0000000,0.5389099,0.9443087,1.0734749,0.7179833,0.9257427,0.2901741,1.0924303,0.6753616,0.6453234,1.0199451,0.8198550},
                {0.7697922,0.2664122,1.0508882,0.6157560,0.8290206,0.7302145,0.8721382,1.1385104,0.5389099,0.0000000,1.0751716,1.0153171,0.9581947,0.8083520,0.5656115,0.8257174,0.7435230,0.4724331,0.8008330,0.7928708},
                {0.3832023,1.1842056,1.0733952,0.8076615,0.9067956,0.9680031,1.1088296,1.0541236,0.9443087,1.0751716,0.0000000,0.8503205,1.1254082,0.7087456,0.8641246,0.9385024,1.0783715,0.8493488,1.3354061,1.4025768},
                {0.7385950,1.0238666,0.5339310,0.9303136,0.5363400,0.6882020,0.7318844,0.2422061,1.0734749,1.0153171,0.8503205,0.0000000,0.7936035,0.5949831,1.0340350,0.5006767,0.6961796,0.7283688,0.6898096,1.2229591},
                {0.9104691,0.8596584,0.4706486,0.8641996,0.6499376,0.9850156,0.3508891,0.9533462,0.7179833,0.9581947,1.1254082,0.7936035,0.0000000,1.0373259,0.7485366,1.0358990,0.3306476,0.7957141,0.7494652,0.8560543},
                {0.6806722,0.9697268,1.0041705,0.9566362,0.8811544,0.8625799,1.0521348,0.7433551,0.9257427,0.8083520,0.7087456,0.5949831,1.0373259,0.0000000,0.9753047,0.6825322,0.9466313,0.7695743,0.9351805,1.3764536},
                {0.5530230,0.5426308,0.9041373,0.3426582,0.7146311,0.8123592,0.6857653,1.2210426,0.2901741,0.5656115,0.8641246,1.0340350,0.7485366,0.9753047,0.0000000,0.9845246,0.6283209,0.4900173,1.0132281,0.6671061},
                {0.7060232,0.8283289,0.7529083,0.7662734,0.5081763,0.3083869,0.8308755,0.4927307,1.0924303,0.8257174,0.9385024,0.5006767,1.0358990,0.6825322,0.9845246,0.0000000,0.7832806,0.5184526,0.6585511,1.0703120},
                {0.7806748,0.6035924,0.3833401,0.6458395,0.4034689,0.6877911,0.1573864,0.8237029,0.6753616,0.7435230,1.0783715,0.6961796,0.3306476,0.9466313,0.6283209,0.7832806,0.0000000,0.5215267,0.5222923,0.6203367},
                {0.4811467,0.4251583,0.7093129,0.3030634,0.4009520,0.3376008,0.5888679,0.8516698,0.6453234,0.4724331,0.8493488,0.7283688,0.7957141,0.7695743,0.4900173,0.5184526,0.5215267,0.0000000,0.6890130,0.6620760},
                {1.0543074,0.6910158,0.6287134,0.9552274,0.6224170,0.6867560,0.6103338,0.6766628,1.0199451,0.8008330,1.3354061,0.6898096,0.7494652,0.9351805,1.0132281,0.6585511,0.5222923,0.6890130,0.0000000,0.8742235},
                {1.0312414,0.5428669,0.8928541,0.6369529,0.7427165,0.8155691,0.6175606,1.3124129,0.8198550,0.7928708,1.4025768,1.2229591,0.8560543,1.3764536,0.6671061,1.0703120,0.6203367,0.6620760,0.8742235,0.0000000}
        };

        String[] fileNames = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20"};

        Clustering clustering = Clustering.getInstance();
        Cluster rootCluster = clustering.createCluster(distanceMatrix, fileNames);

        // height of clusters from bottom to top: 0.1573864 0.2422061 0.2664122 0.2901741 0.3030634 0.3083869 0.3589344 0.3830281 0.3832023 0.5753823 0.6840459 0.7258152 0.7469914 0.7647439 0.8042245 0.8751259 1.2043397 1.5665053 1.8584163

        // morphology of cluster the ones without '-' before it are already agglomerated clusters
//                      [,1] [,2]
//                [1,]   -7  -17
//                [2,]   -8  -12
//                [3,]   -2  -10
//                [4,]   -9  -15
//                [5,]   -4  -18
//                [6,]   -6  -16
//                [7,]   -3   -5
//                [8,]  -13    1
//                [9,]   -1  -11
//                [10,]    7    8
//                [11,]    3    5
//                [12,]    4   11
//                [13,]  -19   10
//                [14,]  -14    2
//                [15,]  -20   12
//                [16,]    6   14
//                [17,]    9   16
//                [18,]   13   15
//                [19,]   17   18
    }


//    @Test
//    public void clusteringTest() {
//        // create cluster with matrix and names
//        Clustering clustering = Clustering.getInstance();
//        Cluster cluster = clustering.createCluster(distanceMatrix, names);
//        clusteringTestRec(cluster);
//
//        List<Cluster> limitedClusters = ClusteringAnalyzer.limitClusterBySize(cluster, 3);
//        assertEquals("clstr#2", limitedClusters.get(2).getName());
//        assertEquals("clstr#1", limitedClusters.get(1).getName());
//        assertEquals("C", limitedClusters.get(0).getName());
//
//    }
//
//    private void clusteringTestRec(Cluster cluster) {
//
//        switch (cluster.getName()) {
//            case "clstr#4":
//                assertEquals(5, cluster.countLeafs());
//                assertEquals(4, cluster.getDistanceValue(), 0d);
//                assertEquals(cluster.getChildren().get(0).getName(), ("C"));
//                assertEquals(cluster.getChildren().get(1).getName(), ("clstr#3"));
//                break;
//            case "clstr#3":
//                assertEquals(4, cluster.countLeafs());
//                assertEquals(3, cluster.getDistanceValue(), 0d);
//                assertEquals(cluster.getChildren().get(0).getName(), ("clstr#1"));
//                assertEquals(cluster.getChildren().get(1).getName(), ("clstr#2"));
//                break;
//            case "clstr#2":
//                assertEquals(2, cluster.countLeafs());
//                assertEquals(2, cluster.getDistanceValue(), 0d);
//                assertEquals(cluster.getChildren().get(0).getName(), ("D"));
//                assertEquals(cluster.getChildren().get(1).getName(), ("E"));
//                break;
//            case "clstr#1":
//                assertEquals(2, cluster.countLeafs());
//                assertEquals(1, cluster.getDistanceValue(), 0d);
//                assertEquals(cluster.getChildren().get(0).getName(), ("A"));
//                assertEquals(cluster.getChildren().get(1).getName(), ("B"));
//                break;
//            default:
//                break;
//        }
//        if (cluster.getChildren().size() == 2) {
//            clusteringTestRec(cluster.getChildren().get(0));
//            clusteringTestRec(cluster.getChildren().get(1));
//        }
//    }

    private double[][] distanceMatrix = new double[][]{
            {0d, 1d, 4d, 3d, 3d},
            {1d, 0d, 4d, 3d, 3d},
            {4d, 4d, 0d, 4d, 4d},
            {3d, 3d, 4d, 0d, 2d},
            {3d, 3d, 4d, 2d, 0d}

    };

    private String[] names = new String[]{
            "a", "b", "c", "d", "e"
    };
}
