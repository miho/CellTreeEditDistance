buildscript {

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath (group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.4+')
    }
}

plugins {
    id 'java'
    id 'com.github.hierynomus.license' version '0.14.0'
}

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

if (!hasProperty('mainClass')) {
    ext.mainClass = 'edu.gcsc.celltreeedit.Main'
}

wrapper {
    gradleVersion = '5.4'
}

repositories {
    jcenter()
}

dependencies {
    testCompile 'org.testfx:testfx-junit:4.0.4-alpha'

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.9'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.9'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-math3
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    // https://mvnrepository.com/artifact/org.apache.lucene/lucene-core
    compile group: 'org.apache.lucene', name: 'lucene-core', version: '8.2.0'
    // https://mvnrepository.com/artifact/org.apache.lucene/lucene-analyzers-common
    compile group: 'org.apache.lucene', name: 'lucene-analyzers-common', version: '8.2.0'
    // https://mvnrepository.com/artifact/org.apache.lucene/lucene-queryparser
    compile group: 'org.apache.lucene', name: 'lucene-queryparser', version: '8.2.0'

//    compile group: 'org.apache.lucene', name: 'lucene-core', version: '8.1.1'
//    compile group: 'org.apache.lucene', name: 'lucene-analyzers-common', version: '8.1.1'
//    compile group: 'org.apache.lucene', name: 'lucene-queryparser', version: '8.1.1'

    compile 'eu.mihosoft.vvecmath:vvecmath:0.4.0'
    compile 'eu.mihosoft.vswc:vswc:0.0.1'
    compile group: 'eu.mihosoft.vrl', name: 'vrl', version: '0.4.4+'
    compile group: 'eu.mihosoft.ext.apted', name: 'apted', version: '0.1'

    implementation files('libs/hierarchical-clustering-1.2.1-SNAPSHOT.jar')
}


def loadProperties(String sourceFileName) {

    def config = new Properties()
    def propFile = new File(projectDir,sourceFileName)

    if (propFile.isFile()) {
        config.load(new FileInputStream(propFile))
        for (Map.Entry property in config) {
            ext.set(property.key, property.value)
        }
    }
}

// loads the property file
loadProperties('build.properties')

// create a fat-jar (class files plus dependencies
// excludes VRL.jar (plugin jar files must not start with 'vrl-\\d+')
jar {

    // dependencies except VRL
    from configurations.runtime.asFileTree.
            filter({file->return !file.name.startsWith("vrl-0")}).
            files.collect { zipTree(it) }

    // project class files compiled from source
    from files(sourceSets.main.output.classesDirs)
    manifest.attributes "Main-Class": "edu.gcsc.celltreeedit.Main"
}

task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'edu.gcsc.celltreeedit.Main'
    }
    baseName = 'all-in-one-jar'
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

String getVRLDir() {

    String result

    if (vrldir.isEmpty()) {
        result = System.getProperty("user.home")
        result+= "/.vrl/"
        result+= eu.mihosoft.vrl.system.Constants.VERSION_MAJOR
        result+= "/default"
    } else {
        result = vrldir
    }

    return result
}

// compiles and installs the vrl plugin to the specified folder
task installVRLPlugin(dependsOn: [clean,jar]) {
    doLast {
        println(">> copying vrl plugin to: " + getVRLDir() + "/plugin-updates")

        copy {
            from buildDir.getPath() + "/libs/" + rootProject.name + ".vrlplugin"
            into getVRLDir() + "/plugin-updates/"
            include rootProject.name + ".vrlplugin"
            rename (rootProject.name + ".vrlplugin", rootProject.name + ".jar")
        }
    }
}

license {
    header = rootProject.file('config/HEADER')
    strictCheck = true
    ignoreFailures = true
    mapping {
        java   = 'SLASHSTAR_STYLE'
        groovy = 'SLASHSTAR_STYLE'
        fxml   = 'XML_STYLE'
    }

    ext.yearCurrent  = new java.text.SimpleDateFormat("yyyy").format(new Date())
    ext.author1 = 'Michael Hoffer <info@michaelhoffer.de>'
    ext.author2 = 'Goethe Center for Scientific Computing, University Frankfurt'
    ext.author3 = 'Erid Guga'
    ext.author4 = 'Lukas Maurer'


    exclude '**/*.svg'
}